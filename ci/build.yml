trigger:
- main

variables:
  BUILD_TYPE: Debug
  SETUP_ENV: "echo $($CC --version) && echo $($CXX --version)"

jobs:
  - job: Ubuntu
    steps:
    pool:
      vmImage: ubuntu-22.04
      - script: |
          pip3 install -r scripts/requirements.txt --no-cache-dir --disable-pip-version-check
          python3 scripts/conan/profile.py clang 15
          python3 scripts/conan/install.py Release clang15
        displayName: Setup
      - script: |
          python3 ./scripts/cmake/configure.py Release clang15
          python3 ./scripts/cmake/build.py Release
          python3 ./scripts/cmake/install.py Release
        displayName: Build

  - job: Windows
    steps:
    pool:
      vmImage: windows-2022
      - script: |
          pip3 install -r scripts/requirements.txt --no-cache-dir --disable-pip-version-check
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          python3 scripts/conan/profile.py msvc 17
          python3 scripts/conan/install.py Release msvc17
        displayName: Setup
      - script: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          python3 ./scripts/cmake/configure.py Release msvc17
          python3 ./scripts/cmake/build.py Release
          python3 ./scripts/cmake/install.py Release
        displayName: Build

  - job: MacOS
    steps:
    pool:
      vmImage: macOS-13
      - script: |
          pip3 install -r scripts/requirements.txt --no-cache-dir --disable-pip-version-check
          python3 scripts/conan/profile.py apple-clang 14
          python3 scripts/conan/install.py Release apple-clang14
        displayName: Setup
      - script: |
          python3 ./scripts/cmake/configure.py Release apple-clang14
          python3 ./scripts/cmake/build.py Release
          python3 ./scripts/cmake/install.py Release
        displayName: Build

  - job: Build
    strategy:
      matrix:

        # Windows 2019 - MSVC
        # https://github.com/actions/runner-images/blob/main/images/win/Windows2019-Readme.md#visual-studio-enterprise-2019
        windows2019_msvc:
          AGENT: 'windows-2019'
          CC: cl
          CXX: cl
          SETUP_ENV: 'call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"'

        # Windows 2019 - Clang
        windows2019_clang:
          AGENT: 'windows-2019'
          CC: clang
          CXX: clang++
          SETUP_ENV: 'call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"'
        windows2019_clang_cl:
          AGENT: 'windows-2019'
          CC: clang-cl
          CXX: clang-cl
          SETUP_ENV: 'call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"'

        # Windows 2022 - MSVC
        # https://github.com/actions/runner-images/blob/main/images/win/Windows2022-Readme.md#visual-studio-enterprise-2022
        windows2022_msvc:
          AGENT: 'windows-2022'
          CC: cl
          CXX: cl
          SETUP_ENV: 'call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"'

        # Windows 2022 - Clang
        windows2022_clang:
          AGENT: 'windows-2022'
          CC: clang
          CXX: clang++
          SETUP_ENV: 'call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"'
        windows2022_clang_cl:
          AGENT: 'windows-2022'
          CC: clang-cl
          CXX: clang-cl
          SETUP_ENV: 'call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"'

        # Ubuntu 20.04 - Clang
        ubuntu2004_clang_10:
          AGENT: 'ubuntu-20.04'
          CC: clang-10
          CXX: clang++-10
        ubuntu2004_clang_11:
          AGENT: 'ubuntu-20.04'
          CC: clang-11
          CXX: clang++-11
        ubuntu2004_clang_12:
          AGENT: 'ubuntu-20.04'
          CC: clang-12
          CXX: clang++-12

        # Ubuntu 20.04 - GCC
        ubuntu2004_gcc_9:
          AGENT: 'ubuntu-20.04'
          CC: gcc-9
          CXX: g++-9
        ubuntu2004_gcc_10:
          AGENT: 'ubuntu-20.04'
          CC: gcc-10
          CXX: g++-10

        # Ubuntu 22.04 - Clang
        ubuntu2204_clang_13:
          AGENT: 'ubuntu-22.04'
          CC: clang-13
          CXX: clang++-13
        ubuntu2204_clang_14:
          AGENT: 'ubuntu-22.04'
          CC: clang-14
          CXX: clang++-14
        ubuntu2204_clang_15:
          AGENT: 'ubuntu-22.04'
          CC: clang-15
          CXX: clang++-15

        # Ubuntu 22.04 - GCC
        ubuntu2204_gcc_9:
          AGENT: 'ubuntu-22.04'
          CC: gcc-9
          CXX: g++-9
        ubuntu2204_gcc_10:
          AGENT: 'ubuntu-22.04'
          CC: gcc-10
          CXX: g++-10
        ubuntu2204_gcc_11:
          AGENT: 'ubuntu-22.04'
          CC: gcc-11
          CXX: g++-11
        ubuntu2204_gcc_12:
          AGENT: 'ubuntu-22.04'
          CC: gcc-12
          CXX: g++-12
        ubuntu2204_gcc_13:
          AGENT: 'ubuntu-22.04'
          CC: gcc-13
          CXX: g++-13

        # MacOS 12 - Clang
        macos12_clang:
          AGENT: 'macOS-12'
          CC: clang
          CXX: clang++

        # MacOS 12 - GCC
        macos12_gcc_11:
          AGENT: 'macOS-12'
          CC: gcc-11
          CXX: g++-11
        macos12_gcc_12:
          AGENT: 'macOS-12'
          CC: gcc-12
          CXX: g++-12

        # MacOS 13 - Clang
        macos13_clang14:
          AGENT: 'macOS-13'
          CC: clang
          CXX: clang++

        # MacOS 13 - GCC
        macos13_gcc_11:
          AGENT: 'macOS-13'
          CC: gcc-11
          CXX: g++-11
        macos13_gcc_12:
          AGENT: 'macOS-13'
          CC: gcc-12
          CXX: g++-12

    pool:
      vmImage: $(AGENT)
    
    steps:
      - script: |
          pip3 install ninja
        displayName: Install Tools

      - script: |
          $(SETUP_ENV)
          echo
          cmake -D CMAKE_BUILD_TYPE=$(BUILD_TYPE) -G Ninja -B build -S .
          cmake --build build --config $(BUILD_TYPE)
        displayName: Build
